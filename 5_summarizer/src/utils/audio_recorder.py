import streamlit as st
from streamlit_mic_recorder import mic_recorder
import openai
import os
import io
from dotenv import load_dotenv

load_dotenv()

# Configura sua chave da API OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY") or "SUA_CHAVE_API_OPENAI"

st.set_page_config(page_title="Gravador e Transcritor", layout="centered")

st.title("üé§ Gravador de √Åudio e Transcritor Whisper")
st.markdown("---")

st.write("Clique no microfone para iniciar a grava√ß√£o. Clique novamente para parar.")

# Usando o mic_recorder com √≠cones e feedback visual
# O componente agora pode exibir um √≠cone e mudar o texto
audio_data = mic_recorder(
    start_prompt="üî¥ Gravar", # √çcone de grava√ß√£o e texto
    stop_prompt="‚úÖ Parar Grava√ß√£o", # √çcone de sucesso e texto
    key="mic_recorder",
    # Opcional: para um visualizador simples de √°udio durante a grava√ß√£o
    # show_visualizer=True # Depende da vers√£o, pode n√£o estar dispon√≠vel ou n√£o ser o que voc√™ espera
)

if audio_data:
    st.success("√Åudio gravado com sucesso!")
    st.audio(audio_data['bytes'], format="audio/wav")

    st.write("Transcrevendo √°udio...")
    try:
        audio_file = io.BytesIO(audio_data['bytes'])
        audio_file.name = "recorded_audio.wav"

        transcript = openai.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file
        )
        st.success("Transcri√ß√£o Conclu√≠da!")
        st.markdown(f"**Transcri√ß√£o:**\n```\n{transcript.text}\n```")
    except openai.APIError as e:
        st.error(f"Erro durante a transcri√ß√£o: {e}")
        st.info("Por favor, garanta que sua chave da API OpenAI √© v√°lida e voc√™ tem cr√©ditos suficientes.")
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado: {e}")

st.markdown("---")
st.write("Este prot√≥tipo usa `streamlit-mic-recorder` para capturar √°udio e o Whisper da OpenAI para transcri√ß√£o.")